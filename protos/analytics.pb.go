//
// SPDX-FileCopyrightText: 2019-2021 Vishesh Handa <me@vhanda.in>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: protos/analytics.proto

package analytics_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform int32

const (
	Platform_android Platform = 0
	Platform_ios     Platform = 1
	Platform_linux   Platform = 2
	Platform_macos   Platform = 3
	Platform_windows Platform = 4
	Platform_web     Platform = 5
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "android",
		1: "ios",
		2: "linux",
		3: "macos",
		4: "windows",
		5: "web",
	}
	Platform_value = map[string]int32{
		"android": 0,
		"ios":     1,
		"linux":   2,
		"macos":   3,
		"windows": 4,
		"web":     5,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_analytics_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_protos_analytics_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{0}
}

type BrowserName int32

const (
	BrowserName_unknown         BrowserName = 0
	BrowserName_firefox         BrowserName = 1
	BrowserName_samsungInternet BrowserName = 2
	BrowserName_opera           BrowserName = 3
	BrowserName_msie            BrowserName = 4
	BrowserName_edge            BrowserName = 5
	BrowserName_chrome          BrowserName = 6
	BrowserName_safari          BrowserName = 7
)

// Enum value maps for BrowserName.
var (
	BrowserName_name = map[int32]string{
		0: "unknown",
		1: "firefox",
		2: "samsungInternet",
		3: "opera",
		4: "msie",
		5: "edge",
		6: "chrome",
		7: "safari",
	}
	BrowserName_value = map[string]int32{
		"unknown":         0,
		"firefox":         1,
		"samsungInternet": 2,
		"opera":           3,
		"msie":            4,
		"edge":            5,
		"chrome":          6,
		"safari":          7,
	}
)

func (x BrowserName) Enum() *BrowserName {
	p := new(BrowserName)
	*p = x
	return p
}

func (x BrowserName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrowserName) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_analytics_proto_enumTypes[1].Descriptor()
}

func (BrowserName) Type() protoreflect.EnumType {
	return &file_protos_analytics_proto_enumTypes[1]
}

func (x BrowserName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrowserName.Descriptor instead.
func (BrowserName) EnumDescriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{1}
}

type AnalyticsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyticsReply) Reset() {
	*x = AnalyticsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsReply) ProtoMessage() {}

func (x *AnalyticsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsReply.ProtoReflect.Descriptor instead.
func (*AnalyticsReply) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{0}
}

type AnalyticsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string       `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Events      []*Event     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	DeviceInfo  *DeviceInfo  `protobuf:"bytes,3,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	PackageInfo *PackageInfo `protobuf:"bytes,4,opt,name=packageInfo,proto3" json:"packageInfo,omitempty"`
}

func (x *AnalyticsMessage) Reset() {
	*x = AnalyticsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsMessage) ProtoMessage() {}

func (x *AnalyticsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsMessage.ProtoReflect.Descriptor instead.
func (*AnalyticsMessage) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyticsMessage) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AnalyticsMessage) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AnalyticsMessage) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *AnalyticsMessage) GetPackageInfo() *PackageInfo {
	if x != nil {
		return x.PackageInfo
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Date           uint64            `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"` // unix timestamp
	Params         map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserId         string            `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	PseudoId       string            `protobuf:"bytes,5,opt,name=pseudoId,proto3" json:"pseudoId,omitempty"`
	UserProperties map[string]string `protobuf:"bytes,6,rep,name=userProperties,proto3" json:"userProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SessionID      uint32            `protobuf:"varint,7,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetDate() uint64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Event) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetPseudoId() string {
	if x != nil {
		return x.PseudoId
	}
	return ""
}

func (x *Event) GetUserProperties() map[string]string {
	if x != nil {
		return x.UserProperties
	}
	return nil
}

func (x *Event) GetSessionID() uint32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=gitjournal.Platform" json:"platform,omitempty"`
	// Types that are assignable to DeviceInfo:
	//	*DeviceInfo_AndroidDeviceInfo
	//	*DeviceInfo_IosDeviceInfo
	//	*DeviceInfo_LinuxDeviceInfo
	//	*DeviceInfo_MacOSDeviceInfo
	//	*DeviceInfo_WindowsDeviceInfo
	//	*DeviceInfo_WebBrowserInfo
	DeviceInfo isDeviceInfo_DeviceInfo `protobuf_oneof:"deviceInfo"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceInfo) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_android
}

func (m *DeviceInfo) GetDeviceInfo() isDeviceInfo_DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetAndroidDeviceInfo() *AndroidDeviceInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_AndroidDeviceInfo); ok {
		return x.AndroidDeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetIosDeviceInfo() *IosDeviceInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_IosDeviceInfo); ok {
		return x.IosDeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetLinuxDeviceInfo() *LinuxDeviceInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_LinuxDeviceInfo); ok {
		return x.LinuxDeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetMacOSDeviceInfo() *MacOSDeviceInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_MacOSDeviceInfo); ok {
		return x.MacOSDeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetWindowsDeviceInfo() *WindowsDeviceInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_WindowsDeviceInfo); ok {
		return x.WindowsDeviceInfo
	}
	return nil
}

func (x *DeviceInfo) GetWebBrowserInfo() *WebBrowserInfo {
	if x, ok := x.GetDeviceInfo().(*DeviceInfo_WebBrowserInfo); ok {
		return x.WebBrowserInfo
	}
	return nil
}

type isDeviceInfo_DeviceInfo interface {
	isDeviceInfo_DeviceInfo()
}

type DeviceInfo_AndroidDeviceInfo struct {
	AndroidDeviceInfo *AndroidDeviceInfo `protobuf:"bytes,11,opt,name=androidDeviceInfo,proto3,oneof"`
}

type DeviceInfo_IosDeviceInfo struct {
	IosDeviceInfo *IosDeviceInfo `protobuf:"bytes,12,opt,name=iosDeviceInfo,proto3,oneof"`
}

type DeviceInfo_LinuxDeviceInfo struct {
	LinuxDeviceInfo *LinuxDeviceInfo `protobuf:"bytes,13,opt,name=linuxDeviceInfo,proto3,oneof"`
}

type DeviceInfo_MacOSDeviceInfo struct {
	MacOSDeviceInfo *MacOSDeviceInfo `protobuf:"bytes,14,opt,name=macOSDeviceInfo,proto3,oneof"`
}

type DeviceInfo_WindowsDeviceInfo struct {
	WindowsDeviceInfo *WindowsDeviceInfo `protobuf:"bytes,15,opt,name=windowsDeviceInfo,proto3,oneof"`
}

type DeviceInfo_WebBrowserInfo struct {
	WebBrowserInfo *WebBrowserInfo `protobuf:"bytes,16,opt,name=webBrowserInfo,proto3,oneof"`
}

func (*DeviceInfo_AndroidDeviceInfo) isDeviceInfo_DeviceInfo() {}

func (*DeviceInfo_IosDeviceInfo) isDeviceInfo_DeviceInfo() {}

func (*DeviceInfo_LinuxDeviceInfo) isDeviceInfo_DeviceInfo() {}

func (*DeviceInfo_MacOSDeviceInfo) isDeviceInfo_DeviceInfo() {}

func (*DeviceInfo_WindowsDeviceInfo) isDeviceInfo_DeviceInfo() {}

func (*DeviceInfo_WebBrowserInfo) isDeviceInfo_DeviceInfo() {}

type PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName        string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
	PackageName    string `protobuf:"bytes,2,opt,name=packageName,proto3" json:"packageName,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	BuildNumber    string `protobuf:"bytes,4,opt,name=buildNumber,proto3" json:"buildNumber,omitempty"`
	BuildSignature string `protobuf:"bytes,5,opt,name=buildSignature,proto3" json:"buildSignature,omitempty"`
	InstallSource  string `protobuf:"bytes,6,opt,name=installSource,proto3" json:"installSource,omitempty"`
}

func (x *PackageInfo) Reset() {
	*x = PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfo) ProtoMessage() {}

func (x *PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfo.ProtoReflect.Descriptor instead.
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *PackageInfo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *PackageInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PackageInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageInfo) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *PackageInfo) GetBuildSignature() string {
	if x != nil {
		return x.BuildSignature
	}
	return ""
}

func (x *PackageInfo) GetInstallSource() string {
	if x != nil {
		return x.InstallSource
	}
	return ""
}

type AndroidBuildVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseOS        string `protobuf:"bytes,1,opt,name=baseOS,proto3" json:"baseOS,omitempty"`
	Codename      string `protobuf:"bytes,2,opt,name=codename,proto3" json:"codename,omitempty"`
	Incremental   string `protobuf:"bytes,3,opt,name=incremental,proto3" json:"incremental,omitempty"`
	PreviewSdkInt uint32 `protobuf:"varint,4,opt,name=previewSdkInt,proto3" json:"previewSdkInt,omitempty"`
	Release       string `protobuf:"bytes,5,opt,name=release,proto3" json:"release,omitempty"`
	SdkInt        uint32 `protobuf:"varint,6,opt,name=sdkInt,proto3" json:"sdkInt,omitempty"`
	SecurityPatch string `protobuf:"bytes,7,opt,name=securityPatch,proto3" json:"securityPatch,omitempty"`
}

func (x *AndroidBuildVersion) Reset() {
	*x = AndroidBuildVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidBuildVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBuildVersion) ProtoMessage() {}

func (x *AndroidBuildVersion) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBuildVersion.ProtoReflect.Descriptor instead.
func (*AndroidBuildVersion) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *AndroidBuildVersion) GetBaseOS() string {
	if x != nil {
		return x.BaseOS
	}
	return ""
}

func (x *AndroidBuildVersion) GetCodename() string {
	if x != nil {
		return x.Codename
	}
	return ""
}

func (x *AndroidBuildVersion) GetIncremental() string {
	if x != nil {
		return x.Incremental
	}
	return ""
}

func (x *AndroidBuildVersion) GetPreviewSdkInt() uint32 {
	if x != nil {
		return x.PreviewSdkInt
	}
	return 0
}

func (x *AndroidBuildVersion) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *AndroidBuildVersion) GetSdkInt() uint32 {
	if x != nil {
		return x.SdkInt
	}
	return 0
}

func (x *AndroidBuildVersion) GetSecurityPatch() string {
	if x != nil {
		return x.SecurityPatch
	}
	return ""
}

type AndroidDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            *AndroidBuildVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Board              string               `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	Bootloader         string               `protobuf:"bytes,3,opt,name=bootloader,proto3" json:"bootloader,omitempty"`
	Brand              string               `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`
	Device             string               `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Display            string               `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	Fingerprint        string               `protobuf:"bytes,7,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Hardware           string               `protobuf:"bytes,8,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Host               string               `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`
	Id                 string               `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Manufacturer       string               `protobuf:"bytes,11,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model              string               `protobuf:"bytes,12,opt,name=model,proto3" json:"model,omitempty"`
	Product            string               `protobuf:"bytes,13,opt,name=product,proto3" json:"product,omitempty"`
	Supported32BitAbis []string             `protobuf:"bytes,14,rep,name=supported32BitAbis,proto3" json:"supported32BitAbis,omitempty"`
	Supported64BitAbis []string             `protobuf:"bytes,15,rep,name=supported64BitAbis,proto3" json:"supported64BitAbis,omitempty"`
	SupportedAbis      []string             `protobuf:"bytes,16,rep,name=supportedAbis,proto3" json:"supportedAbis,omitempty"`
	Tags               string               `protobuf:"bytes,17,opt,name=tags,proto3" json:"tags,omitempty"`
	Type               string               `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	IsPhysicalDevice   bool                 `protobuf:"varint,19,opt,name=isPhysicalDevice,proto3" json:"isPhysicalDevice,omitempty"`
	AndroidId          string               `protobuf:"bytes,20,opt,name=androidId,proto3" json:"androidId,omitempty"`
	SystemFeatures     []string             `protobuf:"bytes,21,rep,name=systemFeatures,proto3" json:"systemFeatures,omitempty"`
}

func (x *AndroidDeviceInfo) Reset() {
	*x = AndroidDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDeviceInfo) ProtoMessage() {}

func (x *AndroidDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDeviceInfo.ProtoReflect.Descriptor instead.
func (*AndroidDeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *AndroidDeviceInfo) GetVersion() *AndroidBuildVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *AndroidDeviceInfo) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBootloader() string {
	if x != nil {
		return x.Bootloader
	}
	return ""
}

func (x *AndroidDeviceInfo) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *AndroidDeviceInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *AndroidDeviceInfo) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *AndroidDeviceInfo) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *AndroidDeviceInfo) GetHardware() string {
	if x != nil {
		return x.Hardware
	}
	return ""
}

func (x *AndroidDeviceInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AndroidDeviceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AndroidDeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AndroidDeviceInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AndroidDeviceInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *AndroidDeviceInfo) GetSupported32BitAbis() []string {
	if x != nil {
		return x.Supported32BitAbis
	}
	return nil
}

func (x *AndroidDeviceInfo) GetSupported64BitAbis() []string {
	if x != nil {
		return x.Supported64BitAbis
	}
	return nil
}

func (x *AndroidDeviceInfo) GetSupportedAbis() []string {
	if x != nil {
		return x.SupportedAbis
	}
	return nil
}

func (x *AndroidDeviceInfo) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *AndroidDeviceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AndroidDeviceInfo) GetIsPhysicalDevice() bool {
	if x != nil {
		return x.IsPhysicalDevice
	}
	return false
}

func (x *AndroidDeviceInfo) GetAndroidId() string {
	if x != nil {
		return x.AndroidId
	}
	return ""
}

func (x *AndroidDeviceInfo) GetSystemFeatures() []string {
	if x != nil {
		return x.SystemFeatures
	}
	return nil
}

type IosUtsname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sysname  string `protobuf:"bytes,1,opt,name=sysname,proto3" json:"sysname,omitempty"`
	Nodename string `protobuf:"bytes,2,opt,name=nodename,proto3" json:"nodename,omitempty"`
	Release  string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Version  string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Machine  string `protobuf:"bytes,5,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *IosUtsname) Reset() {
	*x = IosUtsname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosUtsname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosUtsname) ProtoMessage() {}

func (x *IosUtsname) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosUtsname.ProtoReflect.Descriptor instead.
func (*IosUtsname) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{7}
}

func (x *IosUtsname) GetSysname() string {
	if x != nil {
		return x.Sysname
	}
	return ""
}

func (x *IosUtsname) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *IosUtsname) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *IosUtsname) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IosUtsname) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type IosDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SystemName          string      `protobuf:"bytes,2,opt,name=systemName,proto3" json:"systemName,omitempty"`
	SystemVersion       string      `protobuf:"bytes,3,opt,name=systemVersion,proto3" json:"systemVersion,omitempty"`
	Model               string      `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	LocalizedModel      string      `protobuf:"bytes,5,opt,name=localizedModel,proto3" json:"localizedModel,omitempty"`
	IdentifierForVendor string      `protobuf:"bytes,6,opt,name=identifierForVendor,proto3" json:"identifierForVendor,omitempty"`
	IsPhysicalDevice    bool        `protobuf:"varint,7,opt,name=isPhysicalDevice,proto3" json:"isPhysicalDevice,omitempty"`
	Utsname             *IosUtsname `protobuf:"bytes,8,opt,name=utsname,proto3" json:"utsname,omitempty"`
}

func (x *IosDeviceInfo) Reset() {
	*x = IosDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosDeviceInfo) ProtoMessage() {}

func (x *IosDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosDeviceInfo.ProtoReflect.Descriptor instead.
func (*IosDeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{8}
}

func (x *IosDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IosDeviceInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *IosDeviceInfo) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *IosDeviceInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *IosDeviceInfo) GetLocalizedModel() string {
	if x != nil {
		return x.LocalizedModel
	}
	return ""
}

func (x *IosDeviceInfo) GetIdentifierForVendor() string {
	if x != nil {
		return x.IdentifierForVendor
	}
	return ""
}

func (x *IosDeviceInfo) GetIsPhysicalDevice() bool {
	if x != nil {
		return x.IsPhysicalDevice
	}
	return false
}

func (x *IosDeviceInfo) GetUtsname() *IosUtsname {
	if x != nil {
		return x.Utsname
	}
	return nil
}

type LinuxDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version         string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Id              string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	IdLike          []string `protobuf:"bytes,4,rep,name=idLike,proto3" json:"idLike,omitempty"`
	VersionCodename string   `protobuf:"bytes,5,opt,name=versionCodename,proto3" json:"versionCodename,omitempty"`
	VersionId       string   `protobuf:"bytes,6,opt,name=versionId,proto3" json:"versionId,omitempty"`
	PrettyName      string   `protobuf:"bytes,7,opt,name=prettyName,proto3" json:"prettyName,omitempty"`
	BuildId         string   `protobuf:"bytes,8,opt,name=buildId,proto3" json:"buildId,omitempty"`
	Variant         string   `protobuf:"bytes,9,opt,name=variant,proto3" json:"variant,omitempty"`
	VariantId       string   `protobuf:"bytes,10,opt,name=variantId,proto3" json:"variantId,omitempty"`
	MachineId       string   `protobuf:"bytes,11,opt,name=machineId,proto3" json:"machineId,omitempty"`
}

func (x *LinuxDeviceInfo) Reset() {
	*x = LinuxDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxDeviceInfo) ProtoMessage() {}

func (x *LinuxDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxDeviceInfo.ProtoReflect.Descriptor instead.
func (*LinuxDeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{9}
}

func (x *LinuxDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinuxDeviceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LinuxDeviceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinuxDeviceInfo) GetIdLike() []string {
	if x != nil {
		return x.IdLike
	}
	return nil
}

func (x *LinuxDeviceInfo) GetVersionCodename() string {
	if x != nil {
		return x.VersionCodename
	}
	return ""
}

func (x *LinuxDeviceInfo) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *LinuxDeviceInfo) GetPrettyName() string {
	if x != nil {
		return x.PrettyName
	}
	return ""
}

func (x *LinuxDeviceInfo) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *LinuxDeviceInfo) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *LinuxDeviceInfo) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *LinuxDeviceInfo) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type MacOSDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputerName  string `protobuf:"bytes,1,opt,name=computerName,proto3" json:"computerName,omitempty"`
	HostName      string `protobuf:"bytes,2,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Arch          string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Model         string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	KernelVersion string `protobuf:"bytes,5,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	OsRelease     string `protobuf:"bytes,6,opt,name=osRelease,proto3" json:"osRelease,omitempty"`
	ActiveCPUs    uint32 `protobuf:"varint,7,opt,name=activeCPUs,proto3" json:"activeCPUs,omitempty"`
	MemorySize    uint64 `protobuf:"varint,8,opt,name=memorySize,proto3" json:"memorySize,omitempty"`
	CpuFrequency  uint64 `protobuf:"varint,9,opt,name=cpuFrequency,proto3" json:"cpuFrequency,omitempty"`
}

func (x *MacOSDeviceInfo) Reset() {
	*x = MacOSDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacOSDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacOSDeviceInfo) ProtoMessage() {}

func (x *MacOSDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacOSDeviceInfo.ProtoReflect.Descriptor instead.
func (*MacOSDeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{10}
}

func (x *MacOSDeviceInfo) GetComputerName() string {
	if x != nil {
		return x.ComputerName
	}
	return ""
}

func (x *MacOSDeviceInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *MacOSDeviceInfo) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *MacOSDeviceInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *MacOSDeviceInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *MacOSDeviceInfo) GetOsRelease() string {
	if x != nil {
		return x.OsRelease
	}
	return ""
}

func (x *MacOSDeviceInfo) GetActiveCPUs() uint32 {
	if x != nil {
		return x.ActiveCPUs
	}
	return 0
}

func (x *MacOSDeviceInfo) GetMemorySize() uint64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *MacOSDeviceInfo) GetCpuFrequency() uint64 {
	if x != nil {
		return x.CpuFrequency
	}
	return 0
}

type WindowsDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputerName            string `protobuf:"bytes,1,opt,name=computerName,proto3" json:"computerName,omitempty"`
	NumberOfCores           uint32 `protobuf:"varint,2,opt,name=numberOfCores,proto3" json:"numberOfCores,omitempty"`
	SystemMemoryInMegabytes uint32 `protobuf:"varint,3,opt,name=systemMemoryInMegabytes,proto3" json:"systemMemoryInMegabytes,omitempty"`
}

func (x *WindowsDeviceInfo) Reset() {
	*x = WindowsDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsDeviceInfo) ProtoMessage() {}

func (x *WindowsDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsDeviceInfo.ProtoReflect.Descriptor instead.
func (*WindowsDeviceInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{11}
}

func (x *WindowsDeviceInfo) GetComputerName() string {
	if x != nil {
		return x.ComputerName
	}
	return ""
}

func (x *WindowsDeviceInfo) GetNumberOfCores() uint32 {
	if x != nil {
		return x.NumberOfCores
	}
	return 0
}

func (x *WindowsDeviceInfo) GetSystemMemoryInMegabytes() uint32 {
	if x != nil {
		return x.SystemMemoryInMegabytes
	}
	return 0
}

type WebBrowserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrowserName         BrowserName `protobuf:"varint,1,opt,name=browserName,proto3,enum=gitjournal.BrowserName" json:"browserName,omitempty"`
	AppCodeName         string      `protobuf:"bytes,2,opt,name=appCodeName,proto3" json:"appCodeName,omitempty"`
	AppName             string      `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	AppVersion          string      `protobuf:"bytes,4,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	DeviceMemory        uint64      `protobuf:"varint,5,opt,name=deviceMemory,proto3" json:"deviceMemory,omitempty"`
	Language            string      `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Languages           []string    `protobuf:"bytes,7,rep,name=languages,proto3" json:"languages,omitempty"`
	Platform            string      `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	Product             string      `protobuf:"bytes,9,opt,name=product,proto3" json:"product,omitempty"`
	ProductSub          string      `protobuf:"bytes,10,opt,name=productSub,proto3" json:"productSub,omitempty"`
	UserAgent           string      `protobuf:"bytes,11,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	Vendor              string      `protobuf:"bytes,12,opt,name=vendor,proto3" json:"vendor,omitempty"`
	VendorSub           string      `protobuf:"bytes,13,opt,name=vendorSub,proto3" json:"vendorSub,omitempty"`
	HardwareConcurrency uint32      `protobuf:"varint,14,opt,name=hardwareConcurrency,proto3" json:"hardwareConcurrency,omitempty"`
	MaxTouchPoints      uint32      `protobuf:"varint,15,opt,name=maxTouchPoints,proto3" json:"maxTouchPoints,omitempty"`
}

func (x *WebBrowserInfo) Reset() {
	*x = WebBrowserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_analytics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebBrowserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebBrowserInfo) ProtoMessage() {}

func (x *WebBrowserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_analytics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebBrowserInfo.ProtoReflect.Descriptor instead.
func (*WebBrowserInfo) Descriptor() ([]byte, []int) {
	return file_protos_analytics_proto_rawDescGZIP(), []int{12}
}

func (x *WebBrowserInfo) GetBrowserName() BrowserName {
	if x != nil {
		return x.BrowserName
	}
	return BrowserName_unknown
}

func (x *WebBrowserInfo) GetAppCodeName() string {
	if x != nil {
		return x.AppCodeName
	}
	return ""
}

func (x *WebBrowserInfo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *WebBrowserInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *WebBrowserInfo) GetDeviceMemory() uint64 {
	if x != nil {
		return x.DeviceMemory
	}
	return 0
}

func (x *WebBrowserInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebBrowserInfo) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *WebBrowserInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *WebBrowserInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *WebBrowserInfo) GetProductSub() string {
	if x != nil {
		return x.ProductSub
	}
	return ""
}

func (x *WebBrowserInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *WebBrowserInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *WebBrowserInfo) GetVendorSub() string {
	if x != nil {
		return x.VendorSub
	}
	return ""
}

func (x *WebBrowserInfo) GetHardwareConcurrency() uint32 {
	if x != nil {
		return x.HardwareConcurrency
	}
	return 0
}

func (x *WebBrowserInfo) GetMaxTouchPoints() uint32 {
	if x != nil {
		return x.MaxTouchPoints
	}
	return 0
}

var File_protos_analytics_proto protoreflect.FileDescriptor

var file_protos_analytics_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x85, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x04, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6f, 0x73, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x11,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x77,
	0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x57, 0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xd3, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x61, 0x73, 0x65, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x64,
	0x6b, 0x49, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x64, 0x6b, 0x49, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x64, 0x6b, 0x49, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x22, 0xa2, 0x05, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f,
	0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x33, 0x32, 0x42, 0x69, 0x74, 0x41, 0x62, 0x69, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x33, 0x32, 0x42,
	0x69, 0x74, 0x41, 0x62, 0x69, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x36, 0x34, 0x42, 0x69, 0x74, 0x41, 0x62, 0x69, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x36, 0x34, 0x42,
	0x69, 0x74, 0x41, 0x62, 0x69, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x62, 0x69, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x62, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x49, 0x6f, 0x73, 0x55, 0x74,
	0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x49, 0x6f,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x74, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x49, 0x6f, 0x73, 0x55, 0x74, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x75, 0x74, 0x73, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x50, 0x55, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x50, 0x55, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x11,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x67,
	0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x67, 0x61,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x89, 0x04, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x75,
	0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2a, 0x4c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a,
	0x07, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x6f,
	0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x6d, 0x61, 0x63, 0x6f, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x10, 0x05, 0x2a,
	0x73, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x66,
	0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x73,
	0x75, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x73, 0x69, 0x65,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x61,
	0x72, 0x69, 0x10, 0x07, 0x32, 0x5a, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x69, 0x74, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_protos_analytics_proto_rawDescOnce sync.Once
	file_protos_analytics_proto_rawDescData = file_protos_analytics_proto_rawDesc
)

func file_protos_analytics_proto_rawDescGZIP() []byte {
	file_protos_analytics_proto_rawDescOnce.Do(func() {
		file_protos_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_analytics_proto_rawDescData)
	})
	return file_protos_analytics_proto_rawDescData
}

var file_protos_analytics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protos_analytics_proto_goTypes = []interface{}{
	(Platform)(0),               // 0: gitjournal.Platform
	(BrowserName)(0),            // 1: gitjournal.BrowserName
	(*AnalyticsReply)(nil),      // 2: gitjournal.AnalyticsReply
	(*AnalyticsMessage)(nil),    // 3: gitjournal.AnalyticsMessage
	(*Event)(nil),               // 4: gitjournal.Event
	(*DeviceInfo)(nil),          // 5: gitjournal.DeviceInfo
	(*PackageInfo)(nil),         // 6: gitjournal.PackageInfo
	(*AndroidBuildVersion)(nil), // 7: gitjournal.AndroidBuildVersion
	(*AndroidDeviceInfo)(nil),   // 8: gitjournal.AndroidDeviceInfo
	(*IosUtsname)(nil),          // 9: gitjournal.IosUtsname
	(*IosDeviceInfo)(nil),       // 10: gitjournal.IosDeviceInfo
	(*LinuxDeviceInfo)(nil),     // 11: gitjournal.LinuxDeviceInfo
	(*MacOSDeviceInfo)(nil),     // 12: gitjournal.MacOSDeviceInfo
	(*WindowsDeviceInfo)(nil),   // 13: gitjournal.WindowsDeviceInfo
	(*WebBrowserInfo)(nil),      // 14: gitjournal.WebBrowserInfo
	nil,                         // 15: gitjournal.Event.ParamsEntry
	nil,                         // 16: gitjournal.Event.UserPropertiesEntry
}
var file_protos_analytics_proto_depIdxs = []int32{
	4,  // 0: gitjournal.AnalyticsMessage.events:type_name -> gitjournal.Event
	5,  // 1: gitjournal.AnalyticsMessage.deviceInfo:type_name -> gitjournal.DeviceInfo
	6,  // 2: gitjournal.AnalyticsMessage.packageInfo:type_name -> gitjournal.PackageInfo
	15, // 3: gitjournal.Event.params:type_name -> gitjournal.Event.ParamsEntry
	16, // 4: gitjournal.Event.userProperties:type_name -> gitjournal.Event.UserPropertiesEntry
	0,  // 5: gitjournal.DeviceInfo.platform:type_name -> gitjournal.Platform
	8,  // 6: gitjournal.DeviceInfo.androidDeviceInfo:type_name -> gitjournal.AndroidDeviceInfo
	10, // 7: gitjournal.DeviceInfo.iosDeviceInfo:type_name -> gitjournal.IosDeviceInfo
	11, // 8: gitjournal.DeviceInfo.linuxDeviceInfo:type_name -> gitjournal.LinuxDeviceInfo
	12, // 9: gitjournal.DeviceInfo.macOSDeviceInfo:type_name -> gitjournal.MacOSDeviceInfo
	13, // 10: gitjournal.DeviceInfo.windowsDeviceInfo:type_name -> gitjournal.WindowsDeviceInfo
	14, // 11: gitjournal.DeviceInfo.webBrowserInfo:type_name -> gitjournal.WebBrowserInfo
	7,  // 12: gitjournal.AndroidDeviceInfo.version:type_name -> gitjournal.AndroidBuildVersion
	9,  // 13: gitjournal.IosDeviceInfo.utsname:type_name -> gitjournal.IosUtsname
	1,  // 14: gitjournal.WebBrowserInfo.browserName:type_name -> gitjournal.BrowserName
	3,  // 15: gitjournal.AnalyticsService.SendData:input_type -> gitjournal.AnalyticsMessage
	2,  // 16: gitjournal.AnalyticsService.SendData:output_type -> gitjournal.AnalyticsReply
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_protos_analytics_proto_init() }
func file_protos_analytics_proto_init() {
	if File_protos_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidBuildVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosUtsname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacOSDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_analytics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebBrowserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_analytics_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DeviceInfo_AndroidDeviceInfo)(nil),
		(*DeviceInfo_IosDeviceInfo)(nil),
		(*DeviceInfo_LinuxDeviceInfo)(nil),
		(*DeviceInfo_MacOSDeviceInfo)(nil),
		(*DeviceInfo_WindowsDeviceInfo)(nil),
		(*DeviceInfo_WebBrowserInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_analytics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_analytics_proto_goTypes,
		DependencyIndexes: file_protos_analytics_proto_depIdxs,
		EnumInfos:         file_protos_analytics_proto_enumTypes,
		MessageInfos:      file_protos_analytics_proto_msgTypes,
	}.Build()
	File_protos_analytics_proto = out.File
	file_protos_analytics_proto_rawDesc = nil
	file_protos_analytics_proto_goTypes = nil
	file_protos_analytics_proto_depIdxs = nil
}
